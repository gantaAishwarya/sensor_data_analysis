"""empty message

Revision ID: 1ca7345e0471
Revises: 
Create Date: 2024-12-11 17:38:42.003191

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1ca7345e0471'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sensor_readings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sensor_readings'))
    )
    with op.batch_alter_table('sensor_readings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sensor_readings_timestamp'), ['timestamp'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_user_name', ['first_name', 'last_name'], unique=False)

    op.create_table('houses',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('street', sa.String(length=200), nullable=False),
    sa.Column('house_number', sa.Integer(), nullable=False),
    sa.Column('city', sa.String(length=200), nullable=False),
    sa.Column('pincode', sa.Integer(), nullable=False),
    sa.Column('country', sa.String(length=200), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_houses')),
    sa.UniqueConstraint('street', 'house_number', 'owner_id', name='unique_house_per_owner')
    )
    with op.batch_alter_table('houses', schema=None) as batch_op:
        batch_op.create_index('idx_house_owner', ['owner_id'], unique=False)

    op.create_table('sensors',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('house_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sensors'))
    )
    with op.batch_alter_table('sensors', schema=None) as batch_op:
        batch_op.create_index('ix_sensor_status', ['status'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sensors', schema=None) as batch_op:
        batch_op.drop_index('ix_sensor_status')

    op.drop_table('sensors')
    with op.batch_alter_table('houses', schema=None) as batch_op:
        batch_op.drop_index('idx_house_owner')

    op.drop_table('houses')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('idx_user_name')

    op.drop_table('users')
    with op.batch_alter_table('sensor_readings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sensor_readings_timestamp'))

    op.drop_table('sensor_readings')
    # ### end Alembic commands ###
